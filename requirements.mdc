---
description: 
globs: 
alwaysApply: false
---
## Requerimientos para el Backend Transaccional

1. Objetivo Principal

Desarrollar una aplicación en Java con Spring Boot que exponga una API RESTful para gestionar las operaciones de negocio (compras, transferencias, etc.). El backend debe ser robusto, manejar errores transaccionales de forma explícita y funcionar correctamente bajo carga concurrente para facilitar su consumo desde el frontend.

2. Entidades y Esquema de Base de Datos

La aplicación trabajará con las siguientes tablas. Se deben crear los scripts SQL para generarlas:

    - usuarios: id, nombre, email (debe ser único), saldo.

    - productos: id, nombre, precio, stock.

    - pedidos: id, usuario_id, total, estado, creado_en.

    - cuentas: id, usuario_id, saldo.

    - LogErrores: id, timestamp_error, mensaje_error, detalles (TEXT).

3. Funcionalidades de la API (Endpoints Esenciales)

El backend debe proveer, como mínimo, los siguientes endpoints. Todas las peticiones y respuestas deben usar formato JSON.

    POST /api/users

        Acción: Registra un nuevo usuario.

        Request Body: { "nombre": "...", "email": "..." }

        Lógica: Inserta el nuevo usuario con un saldo inicial de 0. Debe fallar si el email ya existe.

    POST /api/orders

        Acción: Procesa la compra de un producto.

        Request Body: { "userId": 1, "productId": 1, "quantity": 1 }

        Lógica Transaccional:

            Verifica que haya stock del producto.

            Verifica que el saldo del usuario sea suficiente.

            Si las verificaciones son exitosas, actualiza el stock, actualiza el saldo del usuario y crea el pedido.

            Si alguna verificación falla, la operación completa se debe revertir (rollback).

    POST /api/transfers

        Acción: Realiza una transferencia de saldo entre cuentas.

        Request Body: { "fromUserId": 1, "toUserId": 2, "amount": 50.00 }

        Lógica Transaccional: Verifica el saldo de origen y realiza el débito y crédito correspondientes. La operación debe ser atómica.

4. Requerimiento: Manejo de Errores Transaccionales

    Implementación de Rollbacks: Todas las operaciones que modifican múltiples tablas (como la creación de un pedido) deben estar dentro de una transacción (@Transactional en Spring). Si ocurre cualquier error durante la operación, la base de datos debe volver a su estado original (rollback automático).

    Simulación de Fallos: Se debe poder demostrar que el rollback funciona. Por ejemplo, al intentar una compra con saldo insuficiente, se debe verificar que ni el stock del producto ni el saldo del usuario hayan sido modificados.

    Registro de Errores: Cuando ocurra un error inesperado en el servidor (una excepción no controlada), se debe capturar y guardar un registro en la tabla LogErrores con la información básica del fallo (mensaje, hora).

5. Requerimiento: Pruebas de Concurrencia

    Script de Prueba: Crear un script o una clase de prueba simple que simule al menos 10 usuarios intentando comprar el mismo producto al mismo tiempo.

    Análisis y Mejoras:

        - Ejecutar la prueba y observar el comportamiento.

        - Verificar que no se venda más stock del disponible y que los datos se mantengan consistentes.

        - Entregable: Un breve resumen en un archivo ANALISIS.md explicando si se encontraron problemas (ej. lentitud, errores) y qué mejora simple se podría aplicar (ej. "Añadir un índice a la columna producto_id en la tabla de pedidos para acelerar las búsquedas.").

6. Entregables Técnicos

    Código Fuente: El proyecto completo de Spring Boot.

    Docker Compose: Un archivo docker-compose.yml que únicamente levante la base de datos (PostgreSQL recomendada).

    Scripts SQL: Un archivo schema.sql para crear todas las tablas necesarias.

    README.md: Un archivo con instrucciones sencillas para:

    - Levantar la base de datos con Docker.

    - Ejecutar la aplicación Java.
    
    - Un ejemplo de cómo probar un endpoint con curl o Postman. 

7. SEED

   Crea un seed para rellenar con datos las tablas necesarias, datos de prueba obviamente  